---
# Source: traefik/templates/rbac/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik-v2
---
# Source: traefik/templates/crd/ingressroute.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutes.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRoute
    plural: ingressroutes
    singular: ingressroute
  scope: Namespaced
---
# Source: traefik/templates/crd/ingressroutetcp.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressroutetcps.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRouteTCP
    plural: ingressroutetcps
    singular: ingressroutetcp
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingressrouteudps.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: IngressRouteUDP
    plural: ingressrouteudps
    singular: ingressrouteudp
  scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tlsstores.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TLSStore
    plural: tlsstores
    singular: tlsstore
  scope: Namespaced
---
# Source: traefik/templates/crd/middlewares.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: middlewares.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: Middleware
    plural: middlewares
    singular: middleware
  scope: Namespaced
---
# Source: traefik/templates/crd/tlsoptions.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: tlsoptions.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TLSOption
    plural: tlsoptions
    singular: tlsoption
  scope: Namespaced
---
# Source: traefik/templates/crd/traefikservice.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: traefikservices.traefik.containo.us
spec:
  group: traefik.containo.us
  version: v1alpha1
  names:
    kind: TraefikService
    plural: traefikservices
    singular: traefikservice
  scope: Namespaced
---
# Source: traefik/templates/rbac/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-v2
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - ingressroutes
      - ingressroutetcps
      - ingressrouteudps
      - middlewares
      - tlsoptions
      - tlsstores
      - traefikservices
    verbs:
      - get
      - list
      - watch
---
# Source: traefik/templates/rbac/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-v2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-v2
subjects:
- kind: ServiceAccount
  name: traefik-v2
  namespace: default
---
# Source: traefik/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik-v2
  labels:
    app: traefik-v2
  namespace: default
spec:
  replicas: 1 
  selector:
    matchLabels:
      app: traefik-v2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: traefik-v2
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8888'
    spec:
      serviceAccountName: traefik-v2
      terminationGracePeriodSeconds: 60
      containers:
      - image: traefik:2.2.1
        imagePullPolicy: IfNotPresent 
        name: traefik-v2
        volumeMounts:
          - name: zircon-ca
            mountPath: /certs
            readOnly: true
        readinessProbe:
          httpGet:
            path: /ping
            port: 9000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /ping
            port: 9000
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 2
        ports:
        - name: "traefik"
          containerPort: 9000
          protocol: TCP
        - name: "web"
          containerPort: 8000
          protocol: TCP
        - name: "websecure"
          containerPort: 8443
          protocol: TCP
        - containerPort: 8888
          name: metrics
          protocol: TCP
        args:
          - "--accesslog"
          - "--entryPoints.traefik.address=:9000"
          - "--entryPoints.web.address=:8000"
          - "--entryPoints.websecure.address=:8443"
          - "--entryPoints.metrics.address=:8888"
          - "--global.checknewversion=true"
          - "--global.sendanonymoususage=true"
          - "--api.dashboard=true"
          - "--api=true"
          - "--ping=true"
          - "--providers.kubernetescrd"
          - "--log=true"
          - "--log.level=WARN"
          - "--metrics.prometheus=true"
          - "--metrics.prometheus.entryPoint=metrics"
          ## enable integration with Lets Encrypt
          #- "--certificatesresolvers.myresolver.acme.tlschallenge"
          #- "--certificatesresolvers.myresolver.acme.email=email@gmail.com"
          #- "--certificatesresolvers.myresolver.acme.storage=acme.json"
          # cannot mount a rootCA which causes insecureskip to
          # be ignored
          #- "--serversTransport.rootCAs=/certs/CA.crt"
          - "--serverstransport.insecureskipverify=true"
          #- "--tracing=true"
          #- "--tracing.bigboy=true"
          #- "--tracing.bigboy.samplingServerURL=http://toca-bigboy-agent.default.svc:5778/sampling"
          #- "--tracing.bigboy.localAgentHostPort=toca-bigboy-agent.default.svc:6831"
          #- "--tracing.bigboy.collector.endpoint=http://toca-bigboy-collector.default.svc:14268/api/traces?format=bigboy.thrift"
      volumes:
          - name: zircon-ca
            secret:
              secretName: zircon.local.ca
---
# Source: traefik/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: traefik-v2
  labels:
    app: traefik-v2
spec:
  type: LoadBalancer
  loadBalancerIP: 192.168.1.245
  selector:
    app: traefik-v2
  ports:
  - port: 80
    name: web
    targetPort: "web"
  - port: 443
    name: websecure
    targetPort: "websecure"
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-v2-metrics
  labels:
    app: traefik-v2
spec:
  selector:
    app: traefik-v2
  ports:
  - port: 8888
    name: metrics
#---
#apiVersion: traefik.containo.us/v1alpha1
#kind: Middleware
#metadata:
#  name: test-errorpage
#spec:
#  errors:
#    status:
#      - 400-599
#    query: /{status}.html
#    service:
#      name: test-errorpage
#      port: 80
